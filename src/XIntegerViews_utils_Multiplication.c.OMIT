#include "IRangesMultiplication.h"

#include <limits.h>
#include <stdio.h>
#define R_INT_MIN	(1+INT_MIN)



/****************************************************************************
 * Low-level operations on cachedIntSeq structures (sequences of ints).
 */

static cachedIntSeq get_cachedIntSeq_view(const cachedIntSeq *X,
		int view_start, int view_width)
{
	cachedIntSeq X_view;
	int view_offset, tmp;

	view_offset = view_start - 1;
	/* Trim the view if it's "out of limits". */
	if (view_offset < 0) {
		view_width += view_offset;
		view_offset = 0;
	}
	if (view_width > (tmp = X->length - view_offset))
		view_width = tmp;
	X_view.seq = X->seq + view_offset;
	X_view.length = view_width;
	return X_view;
}


//Nathan's function
static double get_cachedIntSeq_mul(const cachedIntSeq *X, int narm, const double *Y)
{
	int xlen, i, x;
	double val, y;
	//ylen = Y->length;
	xlen = X->length;
	val = 0;
	for (i = 0; i < xlen; i++) {
		x = X->seq[i];
		if (x == NA_INTEGER) {
			if (narm)
				continue;
			return NA_INTEGER;
		}
		if ((x > 0 && INT_MAX - x < val)
		 || (x < 0 && R_INT_MIN - x > val)) {
			warning("Integer overflow");
			return NA_INTEGER;
		}
		y = Y[i];
		//printf("%d\t%f\t%d\t%f\n", i, y,x,val);
		val += x*y;
	}
	//printf("returning val: %f\t", val);
	return val;
}



//Nathan's function for gaussian multiplication
SEXP XIntegerViews_summaryN(SEXP x, SEXP na_rm, SEXP y)
{
	SEXP ans, subject;
	cachedIntSeq S, S_view;
	//cachedDoubleSeq multiplier;
	cachedIRanges cached_ranges;
	const char *funname;
	double (*fun)(const cachedIntSeq *, int, const double *);
	int ans_length, v, view_start, view_width, *ans_elt;

	subject = GET_SLOT(x, install("subject"));
	S = _cache_XInteger(subject);

	//multiplier = _cache_XDouble(y);
	double *rans, *y_c = REAL(y);
	double test;

	cached_ranges = _cache_IRanges(GET_SLOT(x, install("ranges")));
	funname = "viewMuls";//CHAR(STRING_ELT(method, 0));
	fun = &get_cachedIntSeq_mul;
	//if (strcmp(funname, "viewMins") == 0)
	//	fun = &get_cachedIntSeq_min;
	//else if (strcmp(funname, "viewMaxs") == 0)
	//	fun = &get_cachedIntSeq_max;
	//else if (strcmp(funname, "viewSums") == 0)
	//	fun = &get_cachedIntSeq_sum;
	//else
	//	error("IRanges internal error in XIntegerViews_summary1(): "
	//	      "invalid method \"%s\"", funname);
	ans_length = _get_IRanges_length(&cached_ranges);
	PROTECT(ans = NEW_NUMERIC(ans_length));
//	PROTECT(ans = allocMatrix(REALSXP,  ans_length, 1 ));
	rans = NUMERIC_POINTER(ans);
	for (v = 0; v < ans_length; v++, rans++) { 	//
		view_start = _get_cachedIRanges_elt_start(&cached_ranges, v);
		view_width = _get_cachedIRanges_elt_width(&cached_ranges, v);
		S_view = get_cachedIntSeq_view(&S, view_start, view_width);
		*rans = fun(&S_view, LOGICAL(na_rm)[0], y_c);
		//*rans = fun(&S_view, LOGICAL(na_rm)[0], y_c);
		//*rans = REAL(test);
/*		const cachedIntSeq *X = &S_view;*/
/*		int narm = LOGICAL(na_rm)[0];*/
/*		const double *Y = y_c;*/
/*		int xlen, i, x;*/
/*		double val, y;*/
/*		//ylen = Y->length;*/
/*		xlen = X->length;*/
/*		val = 0;*/
/*		for (i = 0; i < xlen; i++) {*/
/*			x = X->seq[i];*/
/*			if (x == NA_INTEGER) {*/
/*				if (narm)*/
/*					continue;*/
/*				return NA_INTEGER;*/
/*			}*/
/*			if ((x > 0 && INT_MAX - x < val)*/
/*			 || (x < 0 && R_INT_MIN - x > val)) {*/
/*				warning("Integer overflow");*/
/*				return NA_INTEGER;*/
/*			}*/
/*			y = Y[i];*/
/*			//printf("%d\t%f\t%d\t%f\n", i, y,x,val);*/
/*			val += x*y;*/
/*		}*/
		//return val;
		//*rans = val;
		//printf("%f\t%f\t%f\n", *rans);
		//printf("test:%f\n", test);
	}
	UNPROTECT(1);
	return ans;
}



